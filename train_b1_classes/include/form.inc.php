<?php
#****************************************************************************************************#

				
				#*************************************#
				#********** SANITIZE STRING **********#
				#*************************************#
				
				/**
				*
				*	Ersetzt potentiell gef√§hrliche Steuerzeichen durch HTML-Entities
				*	Entfernt vor und nach einem String unn√∂tige Whitespaces
				*	
				*	@params		String	$value	Die zu bereinigende Zeichenkette
				*
				*	@return		String|NULL			Die bereinigte Zeichenkette|NULL, falls $value NULL ist
				*
				*/
				function sanitizeString($value) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug sanitizeString'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					/*
						Da in PHP k√ºnftig kein Aufruf der PHP-eigenen Funktionen
						mit NULL-Werten erlaubt ist, rufen wir die PHP-Funktionen
						nur auf, wenn $value NICHT NULL ist.
					*/
					if( $value !== NULL ) {
						
						/*
							SCHUTZ GEGEN EINSCHLEUSUNG UNERW√úNSCHTEN CODES:
							Damit so etwas nicht passiert: <script>alert("HACK!")</script>
							muss der empfangene String ZWINGEND entsch√§rft werden!
							htmlspecialchars() wandelt potentiell gef√§hrliche Steuerzeichen wie
							< > " & in HTML-Code um (&lt; &gt; &quot; &amp;).
							
							Der Parameter ENT_QUOTES wandelt zus√§tzlich einfache ' in &apos; um.
							Der Parameter ENT_HTML5 sorgt daf√ºr, dass der generierte HTML-Code HTML5-konform ist.
							
							Der 1. optionale Parameter regelt die zugrundeliegende Zeichencodierung 
							(NULL=Zeichencodierung wird vom Webserver √ºbernommen)
							
							Der 2. optionale Parameter bestimmt die Zeichenkodierung
							
							Der 3. optionale Parameter regelt, ob bereits vorhandene HTML-Entities erneut entsch√§rft werden
							(false=keine doppelte Entsch√§rfung)
						*/
						$value = htmlspecialchars($value, ENT_QUOTES | ENT_HTML5, double_encode:false);
						
						/*
							trim() entfernt VOR und NACH einem String (aber nicht mitten drin) 
							s√§mtliche sog. Whitespaces (Leerzeichen, Tabs, Zeilenumbr√ºche)
						*/
						$value = trim($value);					
					}					
					
					return $value;
					#********** LOCAL SCOPE END **********#
				}
				
				
#****************************************************************************************************#

				
				#*******************************************#
				#********** VALIDATE INPUT STRING **********#
				#*******************************************#
				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf Mindestl√§nge und Maximall√§nge sowie optional 
				* 	zus√§tzlich auf Pflichtangabe.
				*	Generiert Fehlermeldung bei Leerstring, NULL oder ung√ºltiger L√§nge
				*
				*	@param	NULL|String	$value									Der zu √ºbergebende String
				*	@param	Bool			$mandatory=true						Angabe zu Pflichteingabe
				*	@param	Integer		$maxLength=INPUT_MAX_LENGTH		Die zu pr√ºfende Maximall√§nge
				*	@param	Integer		$minLength=INPUT_MIN_LENGTH		Die zu pr√ºfende Mindestl√§nge															
				*
				*	@return	String|NULL												Fehlermeldung | ansonsten NULL
				*
				*/
				function validateInputString($value, $mandatory=true, $maxLength=INPUT_MAX_LENGTH, $minLength=INPUT_MIN_LENGTH) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug validateInputString'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value', [$minLength | $maxLength], mandatory: $mandatory) <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					
					#********** MANDATORY CHECK **********#
					/*
						Da ein zu pr√ºfender String nicht zwangsl√§ufig aus einem Formular,
						sondern beispielswesie auch aus einem JSON-Objekt stammen k√∂nnte, sollten
						hier auch NULL-Werte mit gepr√ºft werden.
					*/
					if( $mandatory === true AND ($value === '' OR $value === NULL) ) {
						// Fehlerfall
						return 'Dies ist ein Pflichtfeld';
					
					
					#********** MAXIMUM LENGTH CHECK **********#
					/*
						Da die Felder in der Datenbank oftmals eine L√§ngenbegrenzung besitzen,
						die Datenbank aber bei √úberschreiten dieser Grenze keine Fehlermeldung
						ausgibt, sondern alles, das √ºber diese Grenze hinausgeht, stillschweigend 
						abschneidet, muss vorher eine Pr√ºfung auf diese Maximall√§nge durchgef√ºhrt 
						werden. Nur so kann dem User auch eine entsprechende Fehlermeldung ausgegeben
						werden.
					*/
					/*
						mb_strlen() erwartet als Datentyp einen String. Wenn (sp√§ter bei der OOP)
						jedoch ein anderer Datentyp wie Integer oder Float √ºbergeben wird, wirft
						mb_strlen() einen Fehler. Da es ohnehin keinen Sinn maht, einen Zahlenwert
						auf seine L√§nge (Anzahl der Zeichen) zu pr√ºfen, wird diese Pr√ºfung nur f√ºr
						den Datentyp 'String' durchgef√ºhrt.
					*/
					} elseif( $value !== NULL AND mb_strlen($value) > $maxLength ) {
						// Fehlerfall
						return "Darf maximal $maxLength Zeichen lang sein";
					
					
					#********** MINIMUM LENGTH CHECK **********#
					/*
						Es gibt Sonderf√§lle, bei denen eine Mindestl√§nge f√ºr einen Userinput
						vorgegeben ist, beispielsweise bei der Erstellung von Passw√∂rtern.
						Damit nicht-Pflichtfelder aber auch weiterhin leer sein d√ºrfen, muss
						die Mindestl√§nge als Standardwert mit 0 vorbelegt sein.
						
						Bei einem optionalen Feldwert, der gleichzeitig eine Mindestl√§nge
						einhalten muss, darf die Pr√ºfung keine Leersrtings validieren, da 
						diese nie die Mindestl√§nge erf√ºllen und somit der Wert nicht mehr 
						optional w√§re.
					*/
					/*
						mb_strlen() erwartet als Datentyp einen String. Wenn (sp√§ter bei der OOP)
						jedoch ein anderer Datentyp wie Integer oder Float √ºbergeben wird, wirft
						mb_strlen() einen Fehler. Da es ohnehin keinen Sinn macht, einen Zahlenwert
						auf seine L√§nge (Anzahl der Zeichen) zu pr√ºfen, wird diese Pr√ºfung nur f√ºr
						den Datentyp 'String' durchgef√ºhrt.
					*/
					} elseif( $value !== NULL AND mb_strlen($value) < $minLength ) {
						// Fehlerfall
						return "Muss mindestens $minLength Zeichen lang sein";
					}
					
					return NULL;
					#********** LOCAL SCOPE END **********#
				}


#****************************************************************************************************#

				
				#*******************************************#
				#********** VALIDATE EMAIL FORMAT **********#
				#*******************************************#
								
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf eine valide Email-Adresse und optional auf Leerstring.
				*	Generiert Fehlermeldung bei ung√ºltiger Email-Adresse und Leerstring, sofern der Parameter
				*	$mandatory true ist.
				*
				*	@param	String	$value							Der zu √ºbergebende String
				*	@param	Bool		$mandatory=true				Angabe zu Pflichteingabe
				*
				*	@return	String|NULL									Fehlermeldung | ansonsten NULL
				*
				*/
				function validateEmail($value, $mandatory=true) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug validateEmail'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					
					#********** MANDATORY CHECK **********#
					/*
						Da ein zu pr√ºfender String nicht zwangsl√§ufig aus einem Formular,
						sondern beispielswesie auch aus einem JSON-Objekt stammen k√∂nnte, sollten
						hier auch NULL-Werte mit gepr√ºft werden.
					*/
					if( $mandatory === true AND ($value === '' OR $value === NULL) ) {
						// Fehlerfall
						return 'Dies ist ein Pflichtfeld';
					
					
					#********** VALIDATE EMAIL ADDRESS FORMAT **********#
					} elseif( $value !== NULL AND $value !== '' AND filter_var($value, FILTER_VALIDATE_EMAIL) === false ) {
						// Fehlerfall
						return 'Dies ist keine g√ºltige Email-Adresse';
						
					
					} else {
						// Erfolgsfall
						return NULL;
					} 
					#********** LOCAL SCOPE END **********#
				}


#****************************************************************************************************#